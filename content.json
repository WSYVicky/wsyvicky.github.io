{"meta":{"title":"Vicky Home","subtitle":null,"description":null,"author":"John Doe","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"show the local weather","slug":"show-the-local-weather","date":"2018-02-23T03:58:18.000Z","updated":"2018-02-23T13:54:01.055Z","comments":true,"path":"2018/02/23/show-the-local-weather/","link":"","permalink":"http://yoursite.com/2018/02/23/show-the-local-weather/","excerpt":"","text":"编译器：codepen步骤 调用openweathermap API 使用 getJSON 方法得到 API 数据，在控制台打印查看得到的数据（这一步非必选，不过是我习惯每做完一步，都打印确认一下结果。）。 123456 $(document).ready(function()&#123; var api='http://api.openweathermap.org/data/2.5/weather?id=2172797&amp;appid=da52b81bb3f7db80c6b8b5d9575a8471'; $.getJSON(api,function(data)&#123; alert(data.coord.lat); &#125;);&#125;);","categories":[],"tags":[{"name":"FCC项目 API 天气预报","slug":"FCC项目-API-天气预报","permalink":"http://yoursite.com/tags/FCC项目-API-天气预报/"}]},{"title":"JSON APIs and Ajax","slug":"JSON-APIs-and-Ajax","date":"2018-02-16T13:02:09.000Z","updated":"2018-02-16T13:44:59.500Z","comments":true,"path":"2018/02/16/JSON-APIs-and-Ajax/","link":"","permalink":"http://yoursite.com/2018/02/16/JSON-APIs-and-Ajax/","excerpt":"","text":"$(document).ready()这个函数中的代码只会在我们的页面加载时候运行一次，确保执行js之前页面所有的dom已经准备就绪。 1234567$(document).ready(function() &#123; $(\"#getMessage\").on(\"click\",function() &#123; $(\".message\").html(\"Here is the message\"); &#125;); // 点击\"Get Message\"按钮，将class为message 的元素的文本改为：“Here is the message”&#125;); API接口、JSON数据 点击”Get Message”按钮。 你的Ajax函数将把文字”The message will go here”替换成此从FreeCodeCam的猫图API中获得的原始JSON数据。 1234567$(document).ready(function() &#123; $(\"#getMessage\").on(\"click\", function()&#123; $.getJSON(\"/json/cats.json\", function(json) &#123; $(\".message\").html(JSON.stringify(json)); &#125;); &#125;);&#125;); .forEach()函数 循环遍历JSON数据写到htmll变量中 1234567891011121314151617181920$(document).ready(function() &#123; $(\"#getMessage\").on(\"click\", function() &#123; $.getJSON(\"/json/cats.json\", function(json) &#123; var html = \"\"; json.forEach(function(val) &#123; var keys = Object.keys(val); html += \"&lt;div class = 'cat'&gt;\"; keys.forEach(function(key) &#123; html += \"&lt;b&gt;\" + key + \"&lt;/b&gt;: \" + val[key] + \"&lt;br&gt;\"; &#125;); html += \"&lt;/div&gt;&lt;br&gt;\"; &#125;); $(\".message\").html(html); &#125;); &#125;);&#125;); 显示 JSON 数组中 img 元素的图片1234567891011121314151617181920212223$(document).ready(function() &#123; $(\"#getMessage\").on(\"click\", function() &#123; $.getJSON(\"/json/cats.json\", function(json) &#123; var html = \"\"; json.forEach(function(val) &#123; html += \"&lt;div class = 'cat'&gt;\"; html += \"&lt;img src = '\" + val.imageLink + \"'&gt;\"; //当我们在遍历这些对象时，我们用imageLink的属性来显示img元素的图片。 html += \"&lt;/div&gt;\"; &#125;); $(\".message\").html(html); &#125;); &#125;);&#125;); JSON API过滤器 我们把其中 “id” 键的值为1的图片过滤掉。 123json = json.filter(function(val) &#123; return (val.id !== 1);&#125;); 浏览器获得前所在位置 我们还可以通过浏览器navigator获得我们当前所在的位置geolocation。 位置的信息包括经度longitude和纬度latitude。 12345 if (navigator.geolocation) &#123; navigator.geolocation.getCurrentPosition(function(position) &#123; $(\"#data\").html(\"latitude: \" + position.coords.latitude + \"&lt;br&gt;longitude: \" + position.coords.longitude); &#125;);&#125;","categories":[],"tags":[{"name":"FCC","slug":"FCC","permalink":"http://yoursite.com/tags/FCC/"}]},{"title":"Where do I belong(数组排序并找出元素索引)","slug":"Where-do-I-belong-数组排序并找出元素索引","date":"2018-02-14T03:56:17.000Z","updated":"2018-02-14T04:00:04.433Z","comments":true,"path":"2018/02/14/Where-do-I-belong-数组排序并找出元素索引/","link":"","permalink":"http://yoursite.com/2018/02/14/Where-do-I-belong-数组排序并找出元素索引/","excerpt":"","text":"【题目要求】 先给数组排序，然后找到指定的值在数组的位置，最后返回位置对应的索引。 举例：where([1,2,3,4], 1.5) 应该返回 1。因为1.5插入到数组[1,2,3,4]后变成[1,1.5,2,3,4]，而1.5对应的索引值就是1。 同理，where([20,3,5], 19) 应该返回 2。因为数组会先排序为 [3,5,20]，19插入到数组[3,5,20]后变成[3,5,19,20]，而19对应的索引值就是2。 【思路】 创建一个新的数组newArr(); 用arguments() 函数将参数分别放入数组newArr(); sort() 函数给数组排序 【代码】 123456789101112131415function where(arr, num) &#123; // 请把你的代码写在这里 var newArr = []; for(var i=0; i&lt;arguments[0].length; i++)&#123; newArr[i] = arguments[0][i]; &#125; newArr.push(arguments[1]); newArr.sort(function(a,b)&#123; return a-b; &#125;); //return newArr; return newArr.indexOf(num);&#125;where([2, 20, 10], 19) ;","categories":[],"tags":[{"name":"算法","slug":"算法","permalink":"http://yoursite.com/tags/算法/"}]},{"title":"Seek and Destroy（摧毁函数）","slug":"Seek-and-Destroy（摧毁函数）","date":"2018-02-14T02:03:10.000Z","updated":"2018-02-14T02:56:51.040Z","comments":true,"path":"2018/02/14/Seek-and-Destroy（摧毁函数）/","link":"","permalink":"http://yoursite.com/2018/02/14/Seek-and-Destroy（摧毁函数）/","excerpt":"","text":"【题目要求】 摧毁数组 金克斯的迫击炮！ 实现一个摧毁(destroyer)函数，第一个参数是待摧毁的数组，其余的参数是待摧毁的值。 【提示参数】 Arguments object Array.filter(function(item,index,array)) 分别定义了，原数组的项，当前元素索引值，数组对象。 indexOf()* 【思路】 创建一个空数组deleteArr() 利用arguments（）获得除了第一个参数以外的其他参数 filter() 函数过滤掉deleteArr数组 【代码】 123456789101112function destroyer(arr) &#123; var deleteArr = []; for(var i=1; i&lt;arguments.length; i++)&#123; deleteArr[i-1] = arguments[i]; &#125; var newArr = arr.filter(function(item,index,array)&#123; return deleteArr.indexOf(item)&lt;0; &#125;); return newArr;&#125;destroyer([\"tree\", \"hamburger\", 53], \"tree\", 53) ;","categories":[],"tags":[{"name":"算法","slug":"算法","permalink":"http://yoursite.com/tags/算法/"}]},{"title":"Object Oriented and Functional Programming","slug":"Object-Oriented-and-Functional-Programming","date":"2018-02-10T01:32:35.000Z","updated":"2018-02-10T03:01:17.839Z","comments":true,"path":"2018/02/10/Object-Oriented-and-Functional-Programming/","link":"","permalink":"http://yoursite.com/2018/02/10/Object-Oriented-and-Functional-Programming/","excerpt":"","text":"构造函数1234567var Car = function() &#123; this.wheels = 4; this.engines = 1; this.seats = 1;&#125;;var myCar = new Car(); //myCar 现在成为了 Car 的一个实例myCar.turboType = \"twin\"; //myCar 变量现在有了一个 turboType 属性了，且值为 \"twin\" 向构造函数添加参数123456var Car = function(wheels, seats, engines) &#123; this.wheels = wheels; this.seats = seats; this.engines = engines;&#125;;var myCar = new Car(6, 3, 1); //调用 构造函数时传入一组 参数 了 向构造函数添加私有属性和私有方法1234567891011121314151617181920var Car = function() &#123; var speed = 10; // this is a private variable // these are public methods this.accelerate = function(change) &#123; speed += change; &#125;; this.decelerate = function() &#123; speed -= 5; &#125;; this.getSpeed = function() &#123; return speed; &#125;;&#125;;``` ### map方法``` bashvar newArray = oldArray.map(function(val)&#123; return val + 3; //使用 map 方法来为 oldArray 中的每一项增加3，并且在 newArray 中保存它们。 oldArray 不应该被改变。&#125;); reduce方法数组方法 reduce 用来迭代一个数组，并且把它累积到一个值中。 1234var singleVal = array.reduce(function(previousVal, currentVal) &#123; return previousVal - currentVal; //使用了 reduce 来让数组中的所有值相减&#125;); filter 方法回调函数返回 true 的项会保留在数组中，返回 false 的项会被过滤出数组。 123var newArray = oldArray.filter(function(val) &#123; return val !== 5; //移除数组中值等于5的项保存到 newArray，并不改变 oddArray &#125;); sort 方法 字母顺序或数字顺序对数组中的元素进行排序. 如果没有传入比较函数，它将把值全部转成字符串，并按照字母顺序进行排序。 12345var array = [1, 12, 21, 2];array.sort(function(a, b) &#123; return a - b; //从小到大的顺序进行排列 return b-a; //从大到小排序&#125;); reverse 方法 翻转数组 12var myArray = [1, 2, 3];myArray.reverse(); //结果myArray 变成了 [3, 2, 1] concat 方法 把两个数组的内容合并到一个数组中 1newArray = oldArray.concat(concatMe); //使用 .concat() 将 concatMe 拼接到 oldArray 后面，并且赋值给 newArray。 split 方法 按指定分隔符将字符串分割为数组 123var string = \"Split me into an array\";var array = [];var array = string.split('s'); //按照 s 字母进行分割 join 方法 把数组转换成字符串，里面的每一个元素可以用你指定的连接符来连接起来，这个连接符就是你要传入的参数。 123var veggies = [\"Celery\", \"Radish\", \"Carrot\", \"Potato\"];var salad = veggies.join(\" and \");console.log(salad); // \"Celery and Radish and Carrot and Potato\"","categories":[],"tags":[]},{"title":"Basic JavaScript","slug":"Basic-JavaScript","date":"2018-02-04T01:49:55.000Z","updated":"2018-02-05T15:15:02.254Z","comments":true,"path":"2018/02/04/Basic-JavaScript/","link":"","permalink":"http://yoursite.com/2018/02/04/Basic-JavaScript/","excerpt":"","text":"变量声明12var ourName; // 创建一个名为ourName的variable（变量） 驼峰命名法变量名的第一个单词的首写字母小写，后面的单词的第一个字母大写。 1var someVariable; 反斜杠在 JavaScript 中，你可以通过在引号前面使用 反斜杠 () 来转义引号。 1var sampleStr = \"Alan said, \\\"Peter is learning JavaScript\\\".\"; 转义当我们需要在字符串中使用与开头结尾相同的引号时，我们需要对引号进行 转义 。如果你有很多双引号的字符串，使用转义字符可能导致难以阅读。这时候可以使用单引号。 1'This string has \"double quotes\" in it. And \"probably\" lots of them.' 字符串中的转义序列 字符串值的长度1\"Alan Peter\".length; // 10 .push() 函数插入一个数值在函数最后 123var arr = [1,2,3];arr.push(4);// 现在arr的值为 [1,2,3,4] .pop() 函数.pop() 函数用来“抛出”一个数组末尾的值。12var oneDown = [1, 4, 6].pop();// 现在 oneDown 的值为 6 ，数组变成了 [1, 4]。 .shift() 函数.shift() 移出第一个元素 .unshift() 函数移入一个元素到数组的头部 1myArray.unshift([\"Paul\",35]); (===) 和 （==）和 （！=）和 （!==）严格相等运算符（===）会同时比较元素的值和数据类型。 123 === 3 // true3 === '3' // false 与相等运算符类似，不相等运算符（！=）在比较的时候也会转换值的数据类型。 123451 != 2 // true1 != \"1\" // false1 != '1' // false1 != true // false0 != false // false 访问对象属性的方法 点操作符(.) 123456var myObj = &#123; prop1: \"val1\", prop2: \"val2\"&#125;;var prop1val = myObj.prop1; // val1var prop2val = myObj.prop2; // val2 中括号操作符([]) 123456var myObj = &#123; \"Space Name\": \"Kirk\", \"More Space\": \"Spock\"&#125;;myObj[\"Space Name\"]; // KirkmyObj['More Space']; // Spock 需要加上引号 使用变量来访问属性的例子： 12345var someProp = \"propName\";var myObj = &#123; propName: \"Some Value\"&#125;myObj[someProp]; // \"Some Value\",不需要加双引号 .hasOwnProperty(propname)检查对象是否有该属性 123456var myObj = &#123; top: \"hat\", bottom: \"pants\"&#125;;myObj.hasOwnProperty(\"top\"); // truemyObj.hasOwnProperty(\"middle\"); // false 在JSON中访问对象的嵌套属性1234567891011121314var ourStorage = &#123; \"desk\": &#123; \"drawer\": \"stapler\" &#125;, \"cabinet\": &#123; \"top drawer\": &#123; \"folder1\": \"a file\", \"folder2\": \"secrets\" &#125;, \"bottom drawer\": \"soda\" &#125;&#125;ourStorage.cabinet[\"top drawer\"].folder2; // \"secrets\"ourStorage.desk.drawer; // \"stapler\" Math.random()函数用来生成一个在0(包括0)到1(不包括1)之间的随机小数，因此Math.random()可能返回0但绝不会返回1。 Math.floor()函数向下取整 获得它最近的整数。 生成0-19之间的随机数 1Math.floor(Math.random() * 20); 生成一个在min和max之间的随机数 1Math.floor(Math.random() * (max - min + 1)) + min 正则表达式Regular expressions 正则表达式被用来根据某种匹配模式来寻找strings中的某些单词。 找到字符串The dog chased the cat中单词 the 1234567891011 /the/gi / 是这个正则表达式的头部the 是我们想要匹配的模式/ 是这个正则表达式的尾部g 代表着 global(全局)，意味着返回所有的匹配而不仅仅是第一个。i 代表着忽略大小写，意思是当我们寻找匹配的字符串的时候忽略掉字母的大小写。 数字选择器\\d 12/\\d/g/\\d+/g 它允许这个正则表达式匹配一个或更多数字,尾部的g是'global'的简写，意思是允许这个正则表达式找到所有的匹配而不是仅仅找到第一个匹配 空白字符\\s 1/\\s+/g 选取句子中的所有空白字符。 非空白字符\\S 1/\\S/g 匹配所有非空白字符","categories":[],"tags":[]},{"title":"jQuery","slug":"jQuery","date":"2018-02-03T01:37:52.000Z","updated":"2018-02-03T02:59:48.077Z","comments":true,"path":"2018/02/03/jQuery/","link":"","permalink":"http://yoursite.com/2018/02/03/jQuery/","excerpt":"","text":"给元素加css123456&lt;script&gt; $(\"document\").ready(function() &#123; $(\"button\").addClass(\"animated bounce\"); 给按钮做回弹动作 &#125;);&lt;/script&gt; 给class加css1$(\".well\").addClass(\"animated shake\"); 给所有class为well的div元素shake效果 给id加css1$(\"#target6\").addClass(\"animated fadeOut\") 给id为target6的button元素添加fade out效果 删除jQuery的css功能1$(\"button\").removeClass(\"btn-default\"); 把所有button元素上的btn-default class移除掉。 更改jQuery1$(\"#target1\").css(\"color\", \"blue\"); 把颜色改变成蓝色 设置按钮成不可选1$(\"button\").prop(\"disabled\", true); 改变元素标记本身1$(\"h3\").html(\"&lt;em&gt;jQuery Playground&lt;/em&gt;\"); 通过em[emphasize]标签来重写和强调标题文本 删除HTML元素1$(\"#target4\").remove(\"#target4\"); 移除页面中的target4元素 移动HTML元素到另一个元素里1$(\"#target4\").appendTo(\"#left-well\"); 让target4从我们的从right-well移到left-well 拷贝元素1$(\"#target2\").clone().appendTo(\"#right-well\"); 改变父元素的颜色1$(\"#left-well\").parent().css(\"background-color\", \"blue\"); 让left-well 元素的父元素parent()的背景色变成蓝色 改变子元素的颜色1$(\"#left-well\").children().css(\"color\", \"blue\") jQuery选择目标元素的子元素1$(\".target:nth-child(3)\").addClass(\"animated bounce\"); 通过target class来选获得目标元素，给id为target的第三个元素加animated和bounce的css jQuery选择目标元素的奇数数元素1$(\".target:odd\").addClass(\"animated shake\"); odd选择奇数元素 jQuery选择目标元素的偶数元素1$(\".target:even\").addClass(\"animated shake\"); even选择奇数元素 效果12fadeOut 淡出hinge 掉落","categories":[],"tags":[]},{"title":"Responsive Design with Bootstrap","slug":"Responsive-Design-with-Bootstrap","date":"2018-02-02T01:33:01.000Z","updated":"2018-02-02T03:28:31.127Z","comments":true,"path":"2018/02/02/Responsive-Design-with-Bootstrap/","link":"","permalink":"http://yoursite.com/2018/02/02/Responsive-Design-with-Bootstrap/","excerpt":"","text":"自动匹配页面大小1234&lt;link rel=\"stylesheet\" href=\"//cdn.bootcss.com/bootstrap/3.3.1/css/bootstrap.min.css\"/&gt;我们需要把所有的HTML内容放在class为container-fluid的div下。&lt;div class=\"container-fluid\"&gt;&lt;/div&gt; 图片宽度自动布局1class=\"img-responsive\" 文字居中1class=\"text-center\" 按钮1class=\"btn\" 简单按钮 1class=\"btn btn-block\" 加框框 1class=\"btn btn-block btn-primary\" 深蓝色 1class=\"btn btn-block btn-info\" 浅蓝色 1class=\"btn btn-block btn-danger\" 红色 1class=\"btn btn-default\" 默认的按钮样式 多个元素放在一行 12345&lt;div class=\"row\"&gt; &lt;div class=\"col-xs-4\"&gt;&lt;/div&gt;. xs/md *是数字 &lt;div class=\"col-xs-4\"&gt;&lt;/div&gt; &lt;div class=\"col-xs-4\"&gt;&lt;/div&gt;&lt;/div&gt; 添加图标12&lt;link rel=\"stylesheet\" href=\"//cdn.bootcss.com/font-awesome/4.2.0/css/font-awesome.min.css\"/&gt;&lt;i class=\"fa fa-info-circle\"&gt;&lt;/i&gt; 创造列的深度感1class=\"well\"","categories":[],"tags":[]},{"title":"HTML5 and CSS","slug":"HTML5-and-CSS","date":"2018-01-31T15:34:47.000Z","updated":"2018-02-01T13:05:20.653Z","comments":true,"path":"2018/01/31/HTML5-and-CSS/","link":"","permalink":"http://yoursite.com/2018/01/31/HTML5-and-CSS/","excerpt":"","text":"注释1&lt;!--和--&gt; 改变某些文本颜色1&lt;h2 style=\"color: blue\"&gt;CatPhotoApp&lt;/h2&gt; 元素选择器1234 &lt;style&gt; 选择器 &#123;属性名称: 属性值;&#125; h2 &#123;color: red;&#125;&lt;/style&gt; 类选择器1234567&lt;style&gt; .blue-text &#123; color: blue; &#125;&lt;/style&gt;然后在h2元素上应用我们声明的类选择器：&lt;h2 class=\"blue-text\"&gt;CatPhotoApp&lt;/h2&gt; 字号123h1 &#123; font-size: 30px;&#125; 字体123h1 &#123; font-family: Sans-serif;&#125; 字体降级12345Helvetica字体不可用时自动降级使用Sans-Serif字体p &#123; font-family: Helvetica, Sans-Serif;&#125; 边框12345678&lt;style&gt; .thin-red-border &#123; border-color: red; border-width: 5px; border-style: solid; 实线 border-radius: 10px; 边框半径，变圆 &#125;&lt;/style&gt; 链接1&lt;p&gt;Here's a &lt;a href=\"http://freecodecamp.cn\"&gt; link to FreeCodeCamp中文社区 &lt;/a&gt; for you to follow.&lt;/p&gt; Nesting（嵌套）1&lt;p&gt;Here's a &lt;a href=\"http://freecodecamp.cn\"&gt; link to FreeCodeCamp中文社区 &lt;/a&gt; for you to follow.&lt;/p&gt; alt属性1&lt;img src=\"www.your-image-source.com/your-image.jpg\" alt=\"your alt text\"&gt; 带项目符号的列表1234&lt;ul&gt; &lt;li&gt;milk&lt;/li&gt; &lt;li&gt;cheese&lt;/li&gt;&lt;/ul&gt; 数字编号列表1234&lt;ol&gt; &lt;li&gt;Garfield&lt;/li&gt; &lt;li&gt;Sylvester&lt;/li&gt;&lt;/ol&gt; 占位符1&lt;input type=\"text\" placeholder=\"cat photo URL\"&gt; 12输入的元素为必填项&lt;input type=\"text\" placeholder=\"cat photo URL\" required&gt; form元素添加一个action属性12action属性的值指定了表单提交到服务器的地址。&lt;form action=\"/url-where-you-want-to-submit-form-data\"&gt;&lt;/form&gt; 单选按钮 复选按钮 默认选项12单选按钮&lt;label&gt;&lt;input type=\"radio\" name=\"indoor-outdoor\"&gt; Indoor&lt;/label&gt; 12复选按钮&lt;label&gt;&lt;input type=\"checkbox\" name=\"personality\"&gt; Loving&lt;/label&gt; 12默认选项&lt;input type=\"radio\" name=\"test-name\" checked&gt; 元素的背景颜色123.green-background &#123; background-color: green;&#125; ID选择器12345定义类选择器必须添加 . 为前缀;定义ID选择器必须添加 # 为前缀。#cat-photo-element &#123; background-color: green; &#125; style覆盖1!important &gt; in-line style（行内样式）&gt; id &gt; class","categories":[],"tags":[]},{"title":"我是如何利用hexo搭建自己的博客的","slug":"我是如何利用hexo搭建自己的博客的","date":"2018-01-24T08:50:57.000Z","updated":"2018-01-24T09:31:05.978Z","comments":true,"path":"2018/01/24/我是如何利用hexo搭建自己的博客的/","link":"","permalink":"http://yoursite.com/2018/01/24/我是如何利用hexo搭建自己的博客的/","excerpt":"","text":"利用Hexo搭建自己的个人博客（MacBook Pro）(一)环境安装 npm的安装 hexo的安装$ npm install hexo-cli -g （二）本地博客搭建 本地初始化一个名为“blog”的文件夹$ hexo init blog 进入blog文件夹$ cd blog 在文件夹中安装npm$ npm install 启动hexo sever$ hexo server （三）将本地blog部署到GitHub上 在GitHub上新建一个profile 域名填写要根据GitHub账户名来定。 配置本地ssh。在终端输入：$ git config --global user.name &quot;WSYVicky&quot;$ git config --global user.mail &quot;1248965945@qq.com&quot; 生成本地公钥和秘钥$ ssh-keygen -t rsa -C &quot;1248965945@qq.com&quot; （四）修改本地.ssh/文件 用编辑器打开.ssh/文件下的id_rsa.pub文件 在GitHub上新建一个ssh keys，将id_rsa.pub文件的内容复制到这里： 测试ssh能不能打通这个账号,在终端输入：ssh -T git@github.com显示successfully就是成功了！ （五）下载一些hexo的插件 $ npm install hexo-deployer-git --save 打开_config.yml文件,修改以下代码：其中repo是从你自己的GitHub中wsyvicky.github.io中复制过来的，点击保存！ 测试部署$ hexo deploy 刷新wsyvicky.github.io，部署成功啦！ （6）修改主题 在hexo的官网上有很多主题，我这里用了一个icarus的主题，然后打开他的GitHub，按照步骤去下载。 修改blog下的_config.yml文件,将theme改成下载好的主题名字。theme: icarus 将修改好的_config.yml文件复制到blog/themes/icarus目录下$ cp _config.yml.example _config.yml $ hexo s去http://localhost:4000/看是否成功。 $ hexo clean &amp;&amp; hexo g -d清除本地垃圾，并且完成部署！ 主题修改完成啦！","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2018-01-23T14:15:02.150Z","updated":"2018-01-23T14:15:02.150Z","comments":true,"path":"2018/01/23/hello-world/","link":"","permalink":"http://yoursite.com/2018/01/23/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}